# Generated by Django 5.0.6 on 2024-07-19 18:10

import django.db.models.deletion
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the plant category.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Provide a description for the plant category.', null=True)),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the plant category.', null=True, upload_to='plant_categories/')),
            ],
            options={
                'verbose_name': 'Plant Category',
                'verbose_name_plural': 'Plant Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlanterCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the planter category.', max_length=100)),
                ('description', models.TextField(help_text='Provide a description for the planter category.')),
                ('image', models.ImageField(help_text='Upload an image for the planter category.', upload_to='planter_categories/')),
            ],
            options={
                'verbose_name': 'Planter Category',
                'verbose_name_plural': 'Planter Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlanterFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the planter features.', max_length=50)),
            ],
            options={
                'verbose_name': 'Planter Feature',
                'verbose_name_plural': 'Planter Features',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlantFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the plant features.', max_length=50)),
            ],
            options={
                'verbose_name': 'Plant Feature',
                'verbose_name_plural': 'Plant Features',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.PositiveSmallIntegerField(help_text='Enter the serial.', unique=True)),
                ('name', models.CharField(help_text='Enter the name of the team member.', max_length=100)),
                ('position', models.CharField(help_text='Enter the position of the team member.', max_length=100)),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the team member.', null=True, upload_to='team_members/')),
                ('phone_number', models.CharField(blank=True, help_text='Enter the phone number of the team member.', max_length=15, null=True)),
                ('facebook_url', models.URLField(blank=True, help_text='Enter the Facebook URL of the team member.', null=True)),
                ('twitter_url', models.URLField(blank=True, help_text='Enter the Twitter URL of the team member.', null=True)),
                ('linkedin_url', models.URLField(blank=True, help_text='Enter the LinkedIn URL of the team member.', null=True)),
                ('instagram_url', models.URLField(blank=True, help_text='Enter the Instagram URL of the team member.', null=True)),
                ('bio', models.TextField(blank=True, help_text='Enter the bio of the team member.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'ordering': ['serial'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the testimonial author.', max_length=100)),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the testimonial author.', null=True, upload_to='testimonials/')),
                ('content', models.TextField(help_text='Enter the content of the testimonial.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ideas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the idea.', max_length=100)),
                ('description', models.TextField(help_text='Provide a description for the idea.')),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the idea.', null=True, upload_to='ideas/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Idea',
                'verbose_name_plural': 'Ideas',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Planter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(help_text='Enter the model of the planter.', max_length=100)),
                ('size', models.CharField(help_text='Enter the size of the planter.', max_length=20)),
                ('description', models.TextField(help_text='Provide a description for the planter.')),
                ('short_description', models.CharField(blank=True, help_text='Enter a short description for the plant.', max_length=255, null=True)),
                ('color', models.CharField(help_text='Enter the color of the planter.', max_length=50)),
                ('is_custom', models.BooleanField(default=False, help_text='Check if the planter is custom-made.')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags that describe the planter.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('category', models.ForeignKey(help_text='Select the category for the planter.', on_delete=django.db.models.deletion.CASCADE, to='main.plantercategory')),
                ('features', models.ManyToManyField(blank=True, help_text='Select the features that describe the planter.', to='main.planterfeatures')),
            ],
            options={
                'verbose_name': 'Planter',
                'verbose_name_plural': 'Planters',
                'ordering': ['model'],
            },
        ),
        migrations.CreateModel(
            name='PlanterImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload an image for the planter.', upload_to='planter_images/')),
                ('short_description', models.CharField(blank=True, help_text='Enter a short description for the image.', max_length=255, null=True)),
                ('planter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.planter')),
            ],
            options={
                'verbose_name': 'Planter Image',
                'verbose_name_plural': 'Planter Images',
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the name of the plant.', max_length=100)),
                ('indoor_or_outdoor', models.CharField(choices=[('Indoor', 'Indoor'), ('Outdoor', 'Outdoor')], help_text='Select whether the plant is meant for indoor or outdoor use.', max_length=10)),
                ('size', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large'), ('Extra Large', 'Extra Large')], help_text='Select the size of the plant.', max_length=20)),
                ('description', models.TextField(help_text='Provide a description for the plant.')),
                ('care_instructions', models.TextField(help_text='Provide care instructions for the plant.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags that describe the plant.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('category', models.ForeignKey(help_text='Select the category for the plant.', on_delete=django.db.models.deletion.CASCADE, to='main.plantcategory')),
                ('features', models.ManyToManyField(blank=True, help_text='Select the features that describe the plant.', to='main.plantfeatures')),
            ],
            options={
                'verbose_name': 'Plant',
                'verbose_name_plural': 'Plants',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlantImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload an image for the plant.', upload_to='plant_images/')),
                ('short_description', models.CharField(blank=True, help_text='Enter a short description for the image.', max_length=255, null=True)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.plant')),
            ],
            options={
                'verbose_name': 'Plant Image',
                'verbose_name_plural': 'Plant Images',
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the project.', max_length=100)),
                ('categories', models.CharField(blank=True, help_text='Enter the categories for the project.', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Provide a description for the project.', null=True)),
                ('client', models.CharField(blank=True, help_text='Enter the name of the client.', max_length=100, null=True)),
                ('year', models.PositiveIntegerField(blank=True, help_text='Enter the year when the project was completed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags that describe the project.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='ProjectImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload an image for the project.', upload_to='project_images/')),
                ('short_description', models.CharField(blank=True, help_text='Enter a short description for the image.', max_length=255, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.projects')),
            ],
            options={
                'verbose_name': 'Project Image',
                'verbose_name_plural': 'Project Images',
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.PositiveSmallIntegerField(help_text='Enter the number of the service category.', unique=True)),
                ('type', models.CharField(blank=True, choices=[('Commercial', 'Commercial'), ('Residential', 'Residential')], default='Residential', help_text='Select the type of service.', max_length=20, null=True)),
                ('title', models.CharField(help_text='Enter the title of the service category.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Provide a description for the service category.', null=True)),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the service category.', null=True, upload_to='service_categories/')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['serial'],
                'unique_together': {('title', 'type')},
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the service.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Provide a description for the service.', null=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags that describe the service.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('categories', models.ManyToManyField(blank=True, help_text='Select the categories that describe the service.', related_name='services', to='main.servicecategory')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload an image for the service.', upload_to='service_images/')),
                ('short_description', models.CharField(blank=True, help_text='Enter a short description for the image.', max_length=255, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service')),
            ],
            options={
                'verbose_name': 'Service Image',
                'verbose_name_plural': 'Service Images',
            },
        ),
    ]
